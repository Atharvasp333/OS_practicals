import java.util.*;

public class PageReplacement {
    static int[] pages;
    static int n, nf;
    static int[] frames;

    static Scanner sc = new Scanner(System.in);

    public static void getData() {
        System.out.print("\nEnter length of page reference sequence: ");
        n = sc.nextInt();
        pages = new int[n];
        System.out.println("Enter the page reference sequence:");
        for (int i = 0; i < n; i++) {
            pages[i] = sc.nextInt();
        }

        System.out.print("Enter number of frames: ");
        nf = sc.nextInt();
        frames = new int[nf];
    }

    public static void initialize() {
        Arrays.fill(frames, -1);
    }

    public static boolean isHit(int data) {
        for (int value : frames) {
            if (value == data)
                return true;
        }
        return false;
    }

    public static void displayFrames() {
        for (int frame : frames) {
            if (frame != -1)
                System.out.print(" " + frame);
        }
        System.out.println();
    }

    public static void fifo() {
        initialize();
        int pageFaults = 0;
        int pointer = 0;

        for (int page : pages) {
            System.out.print("For " + page + ": ");
            if (!isHit(page)) {
                frames[pointer] = page;
                pointer = (pointer + 1) % nf;
                pageFaults++;
                displayFrames();
            } else {
                System.out.println("No page fault");
            }
        }
        System.out.println("Total page faults: " + pageFaults);
    }

    public static void optimal() {
        initialize();
        int pageFaults = 0;

        for (int i = 0; i < n; i++) {
            System.out.print("For " + pages[i] + ": ");
            if (!isHit(pages[i])) {
                int[] nextUse = new int[nf];
                Arrays.fill(nextUse, Integer.MAX_VALUE);

                for (int j = 0; j < nf; j++) {
                    for (int k = i + 1; k < n; k++) {
                        if (frames[j] == pages[k]) {
                            nextUse[j] = k;
                            break;
                        }
                    }
                }

                int indexToReplace = 0;
                int farthest = nextUse[0];
                for (int j = 1; j < nf; j++) {
                    if (nextUse[j] > farthest) {
                        farthest = nextUse[j];
                        indexToReplace = j;
                    }
                }

                frames[indexToReplace] = pages[i];
                pageFaults++;
                displayFrames();
            } else {
                System.out.println("No page fault");
            }
        }
        System.out.println("Total page faults: " + pageFaults);
    }

    public static void lru() {
        initialize();
        int pageFaults = 0;

        for (int i = 0; i < n; i++) {
            System.out.print("For " + pages[i] + ": ");
            if (!isHit(pages[i])) {
                int[] lastUsed = new int[nf];
                Arrays.fill(lastUsed, -1);

                for (int j = 0; j < nf; j++) {
                    for (int k = i - 1; k >= 0; k--) {
                        if (frames[j] == pages[k]) {
                            lastUsed[j] = k;
                            break;
                        }
                    }
                }

                int lruIndex = 0;
                int min = lastUsed[0];
                for (int j = 1; j < nf; j++) {
                    if (lastUsed[j] < min) {
                        min = lastUsed[j];
                        lruIndex = j;
                    }
                }

                frames[lruIndex] = pages[i];
                pageFaults++;
                displayFrames();
            } else {
                System.out.println("No page fault");
            }
        }
        System.out.println("Total page faults: " + pageFaults);
    }

    public static void main(String[] args) {
        while (true) {
            System.out.println("\nPage Replacement Algorithms");
            System.out.println("1. Enter Data");
            System.out.println("2. FIFO");
            System.out.println("3. Optimal");
            System.out.println("4. LRU");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    getData();
                    break;
                case 2:
                    fifo();
                    break;
                case 3:
                    optimal();
                    break;
                case 4:
                    lru();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice!");
            }
        }
    }
}
